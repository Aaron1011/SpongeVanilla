classes {
  "net.minecraft.server.MinecraftServer" {
    name: net.minecraft.server.MinecraftServer
    methods {
      startServerThread: B
      tick: y
      func_152361_a: a(sn)
      isBlockProtected: a(aqu;dt;ahd)
      worldServerForDimension: a(int)
    }
    fields {
      commandManager: p
      fileBannedIPs: b
      fileBannedPlayers: a
      fileWhitelist: d
      logger: j
      configurationManager: v
      serverThread: aa
    }
  }

  "net.minecraft.command.ServerCommandManager" {
    name: cl
  }

  "net.minecraft.entity.Entity" {
    name: wv
    methods {
      // A lot of these are completely and utterly useless

      getEntityID: F
      setEntityId: d(int)
      entityInit: h
      getDataWatcher: H
      setDead: J
      setSize: a(float;float)
      setRotation: b(float;float)
      setPosition: b(double;double;double)
      onUpdate: s_
      //onEntityUpdate: K
      getMaxInPortalTime: L
      setOnFireFromLava: M
      setFire: e(int)
      extinguish: N
      kill: O
      isOffsetPositionInLiquid: c(double;double;double)
      moveEntity: d(double;double;double)
      playSound: a(String;float;float)
      canTriggerWalking: r_
      //updateFallState: a(double;boolean;atr;dt)
      getBoundingBox: S
      dealFireDamage: f(int)
      isImmuneToFire: K
      fall: e(float;float)
      isWet: U
      isInWater: V
      handleWaterMovement: W
      getSplashSound: aa
      //isInsideOfMaterial: a(bof)
      handleLavaMovement: ab
      moveFlying: a(float;float;float)
      getBrightness: c(float)
      //setWorld: a(aqu)
      setLocationAndAngles: b(double;double;double;float;float)
      getDistanceToEntity: g(n.m.entity.Entity)
      getDistanceSq: e(double;double;double)
      getDistance: f(double;double;double)
      getDistanceSqToEntity: h(n.m.entity.Entity)
      //onCollideWithPlayer: d(EntityPlayer)
      applyEntityCollision: i(n.m.entity.Entity)
      addVelocity: g(double;double;double)
      setBeenAttacked: ac
      //attackEntityFrom: a(ro;float)
      canBeCollidedWith: ad
      canBePushed: ae
      addToPlayerScore: b(n.m.entity.Entity;int)
      getEntityString: ag
      onChunkLoad: ah
      entityDropItem: a(amj;float)
      isEntityAlive: ai
      isEntityInsideOpaqueBlock: aj
      interactFirst: e(ahd)
      //getCollisionBox: j
      updateRidden: ak
      updateRiderPosition: al
      getYOffset: am
      getMountedYOffset: an
      mountEntity: a(n.m.entity.Entity)
      getCollisionBorderSize: ao
      getLookVector: ap
      isEating: aq
      setEating: f(boolean)
      getInventory: at
      setCurrentItemOrArmor: c(int;amj)
      getPortalCooldown: ar
      isBurning: au
      isRiding: av
      isSneaking: aw
      setSneaking: c(boolean)
      isSprinting: ax
      setSprinting: d(boolean)
      isInvisible: ay
      setInvisible: e(boolean)
      getFlag: g(int)
      setFlag: b(int;boolean)
      getAir: aA
      setAir: h(int)
      //onStruckByLightning: a(ads)
      //onKillEntity: a(xm)
      setInWeb: aB
      getCommandSenderName: d_
      getParts: aC
      isEntityEqual: k(n.m.entity.Entity)
      getRotationYawHead: aD
      canAttackWithItem: aE
      hitByEntity: l(n.m.entity.Entity)
      copyDataFrom: n(n.m.entity.Entity)
      travelToDimension: c(int)
      getMaxSafePointTries: aF
      getTeleportDirection: aG
      doesEntityNotTriggerPressurePlate: aH
      //addEntityCrashInfo: a(j)
      getUniqueID: aJ
      isPushedByWater: aK
      getWorld: e
    }

    fields {
      dimension: am
    }
  }

  "net.minecraft.entity.player.EntityPlayer" {
    name: ahd
    methods {
      clearItemInUse: bU
      getEquipmentInSlot: p
      getHeldItem: bz
      getName: d_
      stopUsingItem: bT
      addChatComponentMessage: b(ho)
    }
  }

  "net.minecraft.init.Bootstrap" {
    name: od
    methods {
      func_151354_b: c
    }
  }

  "net.minecraft.server.dedicated.DedicatedServer" {
    name: po
    methods {
      startServer: i
    }
  }

  "net.minecraft.server.ThreadServerShutdown" {
    name: pe
  }

  "net.minecraft.command.ICommandSender" {
    name: ae

    methods {
      getName: d_
    }
  }

  "net.minecraft.command.CommandHandler" {
    name: ab

    methods {
      executeCommand: a(ae;String)
    }
  }

  "net.minecraft.util.IChatComponent" {
    name: ho

    methods {
      appendText: a(String)
      appendSibling: a(n.m.util.IChatComponent)

      getUnformattedTextForChat: e
    }
  }

  "net.minecraft.util.ChatComponentText" {
    // Isn't this "hy"?
    name: hy

    fields {
      text: b
    }
  }

  "net.minecraft.server.management.ServerConfigurationManager" {
    name: sn

    methods {
      initializeConnectionToPlayer: a(gr;qw)
      func_148545_a: f(com.mojang.authlib.GameProfile)
    }

    fields {
      playerEntityList: e
    }
  }

  "net.minecraft.entity.player.EntityPlayerMP" {
    name: qw

    fields {
      playerNetServerHandler: a
    }
  }

  "net.minecraft.item.ItemStack" {
    name: amj

    methods {
      getName: q
    }
  }

  "net.minecraft.network.NetworkManager" {
    name: gr
  }

  "net.minecraft.server.dedicated.DedicatedPlayerList" {
    name: pn
  }

  "net.minecraft.util.ChunkCoordinates" {
    // TODO: this is actually fd, but I don't know what the actual dt is, and it extends fd, so I'm gonna cheat here
    name: dt

    methods {
      getX: n
      getY: o
      getZ: p
    }
  }

  "net.minecraft.world.World" {
    name: aqu

    methods {
      getBlock: p(dt)
      setBlock: a(dt;bec)
    }
  }

  "net.minecraft.network.NetHandlerPlayServer" {
    name: rj
    methods {
      func_147345_a: a(ml)
      func_147346_a: a(mx)

      sendPacket: a(id)
    }

    fields {
      playerEntity: b
    }
  }

  "net.minecraft.network.play.client.C07PacketPlayerDigging" {
    name: ml

    methods {
      getPosition: a
    }
  }

  "com.mojang.authlib.GameProfile" {
    name: com.mojang.authlib.GameProfile
  }

  "net.minecraft.server.management.ItemInWorldManager" {
    name: qx

    methods {
      tryHarvestBlock: b(net.minecraft.util.ChunkCoordinates)
      activateBlockOrUseItem: a(ahd;aqu;amj;dt;ej;float;float;float)
    }

    fields {
      thisPlayerMP: b
      theWorld: a
    }
  }

  "net.minecraft.block.Block" {
    name: atr

    methods {
      getIdFromBlock: a(n.m.block.Block)

      createStackedBlock: i(n.m.block.IBlockWithMetadata)
    }

    fields {
      blockRegistry: c
      blockHardness: w
      blockResistance: x
      canBlockGrass: t
      lightOpacity: s
      slipperiness: K
      lightValue: u

      // See below
      blockWithMetadata: M

      blockMetadata: L

      unlocalizedName: N
    }
  }

  "net.minecraft.item.Item" {
    name: alq
  }

  "net.minecraft.util.RegistryNamespaced" {
    name: eh
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockWithMetadata" {
    name: beg

    methods {
      getValue: b(n.m.block.BlockMetadataValue)
      setValue: a(n.m.block.BlockMetadataValue;Comparable)
      getBlock: c
    }

    fields {
      values: b
    }
  }

  "net.minecraft.block.IBlockWithMetadata" {
    name: bec
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadata" {
    name: bed

    fields {
      options: d
      variants: e
    }
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadataValue" {
    name: bex

    methods {
      getValues: c
      getName: a
    }
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadataEnumValue" {
    name: bev

    fields {
      valuesMap: b
    }
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.BlockMetadataEnum" {
    name: va

    methods {
      // I really have no idea what this is
      // TODO
      getSomething: l
    }
  }



  "net.minecraft.network.play.client.C08PacketPlayerBlockPlacement" {
    name: mx
  }

  "net.minecraft.network.play.client.S23PacketBlockChange" {
    name: iw
  }

  "net.minecraft.network.Packet" {
    name: id
  }

  // Our unofficial name, waiting for MCP
  "net.minecraft.block.Direction": {
    name: ej
  }

  "net.minecraft.util.ChatComponentTranslation" {
    name: hz

    fields {
      formatArgs: e
      key: d
    }
  }
}